// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import product "github.com/nqmt/go-service/domain/product"

// IProductRepo is an autogenerated mock type for the IProductRepo type
type IProductRepo struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: _a0
func (_m *IProductRepo) CreateProduct(_a0 *product.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: id
func (_m *IProductRepo) DeleteProduct(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProduct provides a mock function with given fields: id
func (_m *IProductRepo) GetProduct(id string) *product.Product {
	ret := _m.Called(id)

	var r0 *product.Product
	if rf, ok := ret.Get(0).(func(string) *product.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	return r0
}

// GetProductList provides a mock function with given fields:
func (_m *IProductRepo) GetProductList() ([]*product.Product, error) {
	ret := _m.Called()

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func() []*product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: _a0
func (_m *IProductRepo) UpdateProduct(_a0 *product.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
